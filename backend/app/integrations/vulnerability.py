from typing import List, Dict, Optional
from datetime import datetime, timedelta

class VulnerabilityIntegration:
    """Integration with vulnerability management systems"""
    
    async def get_incident_vulnerabilities(self, incident_id: int) -> List[Dict]:
        """Get vulnerabilities related to incident"""
        return [
            {
                "cve_id": "CVE-2024-1234",
                "severity": "critical",
                "score": 9.8,
                "description": "Remote code execution vulnerability",
                "affected_systems": ["web-server-01", "web-server-02"],
                "patched": False,
                "patch_available": True
            },
            {
                "cve_id": "CVE-2024-5678", 
                "severity": "high",
                "score": 7.5,
                "description": "SQL injection vulnerability",
                "affected_systems": ["database-01"],
                "patched": True,
                "patch_date": "2024-01-10T15:30:00Z"
            }
        ]
    
    async def get_patch_status(self) -> Dict:
        """Get overall patch status"""
        return {
            "total_vulnerabilities": 15,
            "critical_unpatched": 1,
            "high_unpatched": 3,
            "medium_unpatched": 5,
            "low_unpatched": 2,
            "patched": 4,
            "patch_compliance": 73.3,
            "last_scan": datetime.utcnow().isoformat()
        }
    
    async def apply_patch(self, vuln_id: str) -> Dict:
        """Apply patch for vulnerability"""
        return {
            "success": True,
            "vulnerability_id": vuln_id,
            "patch_applied": True,
            "patch_date": datetime.utcnow().isoformat(),
            "reboot_required": False,
            "message": f"Patch applied successfully for {vuln_id}"
        }
